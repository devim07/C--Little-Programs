//Ascending Or decending order using function pointer

#include<stdio.h>
void SelectionSort(int arr[], int nSize, int (*pComparison)(int,int))
{
    int t,i,j;   //10, 9, 7, 5, 6, 1, 8, 2, 4
    for ( i= 0; i <nSize-1; i++)
    {
        for ( j = i+ 1; j <nSize; j++)
        {
            // Note that we are using the user-defined comparison HERE
            if (pComparison(arr[i], arr[j])) // COMPARISON DONE HERE
            {
                t=arr[i];
                arr[i]=arr[j];
                arr[j]=t;
            }
        }
    }
}

// Here is a comparison function that sorts in ascending order
// (Note: it's exactly the same as the previous Ascending() function)
int Ascending(int nX, int nY)
{
    return nX>nY; //1  0
}

// Here is a comparison function that sorts in descending order
int Descending(int nX, int nY)
{
    return nX<nY;
}

// This function prints out the values in the array
void PrintArray(int *pArray, int nSize)
{ 
    int i;
    for (i=0; i <nSize; i++)
        printf("%d\t", pArray[i] );
}

int main()
{
    char ch;
	int arr[9] = { 10, 7,9, 5, 6, 1, 8, 2, 4 };
	printf("Enter a choice  “a” for ascending and “d” for descending: ");
	scanf("%c", &ch);
    if(ch=='a'|| ch=='A')
    {
        SelectionSort(arr, 9,Ascending);
        PrintArray(arr, 9);
	}
	else 
	{
        // Sort the array in ascending order using the Ascending() function
        SelectionSort(arr, 9, Descending );
        PrintArray(arr, 9);
	}
return 0;
}

